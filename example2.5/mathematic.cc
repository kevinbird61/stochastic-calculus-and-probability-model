#include <cstdio>
#include <unistd.h>
#include <cstdlib>
#include <cstring>
#include <cmath>

// Get permutations - C(m,n), which m>=n
int permutations(int m,int n);
// Get probability result by specified N
float probability(int m,int n);

int main(int argc,char *argv[]){
    int M=5,N,MAX;
    float p=0.2;
    // specify m=5, all probability=0.2
    // calculate the result from mathematic model

    // Get N from argc
    if(argc<2){
        printf("Error, Please specify 'N' now.\n");
        exit(EXIT_FAILURE);
    }
    else if(argc<3){
        printf("Error, Please specify 'MAX' now.\nNotice: This MAX value must come from the result which generated by simulation.cc\n");
        exit(EXIT_FAILURE);
    }
    else{
        N=std::atoi(argv[1]);
        MAX=std::atoi(argv[2]);
        printf("Range: 1~%d , with iteration N=%d, and MAX=%d\n",M,N,MAX);
    }

    // Calculate result
    printf("The probability of P{X=%d} = %f\n",N,probability(M,N));

    // Generate testcase 
    FILE *fp_math = fopen("mathematic.output","w+");
    for(int i=1;i<=MAX;i++){
        if(i>=M)
            fprintf(fp_math,"%d %f\n",i,probability(M,i));
        else 
            fprintf(fp_math,"%d %f\n",i,0.0);
    }

    return 0;
}

float probability(int m,int n){
    int comp_flag=1;
    float result=0.0;
    for(int i=0;i<m;i++){
        // get the probability
        float p=0.2;
        for(int j=0;j<i;j++)
            p+=0.2;

        result+=(comp_flag)*(permutations(m,i+1))*p*pow(1-p,n-1);

        // last step, reverse flag
        comp_flag=-comp_flag;
    }

    return result;
}

int permutations(int m,int n){
    int numerator=1,denominator=1;

    for(int i=0;i<n;i++){
        numerator*=(m-i);
        denominator*=(i+1);
    }

    return numerator/denominator;
}